
lua.eval 
{
    if br.utils.table.includes(arg, "-o") or br.utils.table.includes(arg, "--output") then
        local temp = br.utils.table.find(arg, "-o") or br.utils.table.find(arg, "--output")
        br.vm.outputpath = arg[temp + 1]
        table.remove(arg, temp)
        table.remove(arg, temp)
    end

    if br.utils.table.includes(arg, "--serialize") then
        local position = br.utils.table.find(arg, "--serialize");
        table.remove(arg, position);
        br.help(arg)
        br.filepath = arg[2]
        br.filetxt = br.utils.file.load.text(br.filepath)
        br.splited = br.utils.string.split(br.filetxt, " ")
        br.result = ""
        for i = 1, #br.splited-1 do
            if br.splited[i] then
                br.result = br.result .. string.char(tonumber(br.splited[i]))
            end
        end
        br.utils.file.save.text(br.vm.outputpath, br.result)
        os.exit()
    end

    if br.utils.table.includes(arg, "--deserialize") then
        local position = br.utils.table.find(arg, "--deserialize");
        table.remove(arg, position);
        br.help(arg)
        br.filepath = arg[2]
        br.filetxt = br.utils.file.load.text(br.filepath)
        br.result = ""
        for i = 1, #br.filetxt do
            br.result = br.result .. string.byte(br.filetxt:sub(i, i)) .. " "
        end
        if br.vm.outputpath then
            br.utils.file.save.text(br.vm.outputpath, br.result)
        else
            br.utils.file.save.text(br.utils.string.concat(arg[2], ".txt"), br.result)
        end
        os.exit()
    end
};

set vm.c_code_cache {};

set structs from [];

set struct from lua.function {...} 
{
    local args = {...};
    local obj = {};
    for i=2, #args, 3 do
        table.insert(obj, {index=args[i], type=args[i+1], name=args[i+2]});
    end
    obj.name = args[1];
    table.insert(br.structs, obj);
};

set bakestructs from lua.function {} 
{
    local finaltxt = "";
    for structType ,obj in ipairs(br.structs) do
        local tmp = "typedef struct \n{\n";
        for k,v in ipairs(obj) do
            tmp = tmp .. "    " .. ((v.type == "string") and "char*" or v.type) .. " " .. v.name .. ";\n";
        end
        tmp = tmp .. "} " .. obj.name .. ";\n\n";
        tmp = tmp .. obj.name .. " get_" .. obj.name .. "(Disk *disk, int index)\n{\n";
        tmp = tmp .. "    " .. obj.name .. " _obj;\n";
        for k,v in ipairs(obj) do
            if v.type == "string" then
                local _len = obj[k+1] and obj[k+1].index-obj[k].index or 4;
                tmp = tmp .. "    " .. "_obj." .. v.name .. " = get_" .. v.type .. "(*disk, index + " .. v.index .. ", " .. _len .. ");\n";
            else
                tmp = tmp .. "    " .. "_obj." .. v.name .. " = get_" .. v.type .. "(*disk, index + " .. v.index .. ");\n";
            end
        end
        tmp = tmp .. "    " .. "return _obj;\n";
        tmp = tmp .. "}\n\n";
        
        tmp = tmp .. "void set_" .. obj.name .. "(Disk *disk, int index, " .. obj.name .. " _obj)\n{\n";
            for k,v in ipairs(obj) do
                if v.type == "string" then
                    local _len = obj[k+1] and obj[k+1].index-obj[k].index or 4;
                    tmp = tmp .. "    " .. "set_" .. v.type .. "(disk, index + " .. v.index .. ", _obj." .. v.name .. ", " .. _len .. ");\n";
                else
                    tmp = tmp .. "    " .. "set_" .. v.type .. "(disk, index + " .. v.index .. ", _obj." .. v.name .. ");\n";
                end
            end
            tmp = tmp .. "}\n\n";

        finaltxt = finaltxt .. tmp;
    end
    return finaltxt;
};

// lua.eval {
    if(arg[2]) then 
        local file = br.utils.file.load.text(arg[2]);
        br.bruter.eval(file);
        file = br.bakestructs();
        br.utils.file.save.text(arg[3], file);
    end
};

set code from lua.function {str} {
    br.vm.c_code_cache = br.vm.c_code_cache .. str;
};
help $lua.global.arg;

bruter.include $lua.global.arg.2;

set baked_structs from bakestructs;

lua.eval {
    br.vm.c_code = br.vm.c_code .. br.baked_structs;
    br.vm.c_code = br.vm.c_code .. br.vm.c_code_cache;
};

utils.file.save.text $lua.global.arg.3 $vm.c_code;