set structs from [];

set struct from lua.function {...} 
{
    local args = {...};
    local obj = {};
    for i=2, #args, 3 do
        table.insert(obj, {index=args[i], type=args[i+1], name=args[i+2]});
    end
    obj.name = args[1];
    table.insert(br.structs, obj);
};

set bakestructs from lua.function {} 
{
    local finaltxt = "";
    for structType ,obj in ipairs(br.structs) do
        local tmp = "typedef struct \n{\n";
        for k,v in ipairs(obj) do
            tmp = tmp .. "    " .. ((v.type == "string") and "char*" or v.type) .. " " .. v.name .. ";\n";
        end
        tmp = tmp .. "} " .. obj.name .. ";\n\n";
        tmp = tmp .. obj.name .. " get_" .. obj.name .. "(Disk *disk, int index)\n{\n";
        tmp = tmp .. "    " .. obj.name .. " _obj;\n";
        for k,v in ipairs(obj) do
            if v.type == "string" then
                local _len = obj[k+1] and obj[k+1].index-obj[k].index or 4;
                tmp = tmp .. "    " .. "_obj." .. v.name .. " = get_" .. v.type .. "(*disk, index + " .. v.index .. ", " .. _len .. ");\n";
            else
                tmp = tmp .. "    " .. "_obj." .. v.name .. " = get_" .. v.type .. "(*disk, index + " .. v.index .. ");\n";
            end

        end
        tmp = tmp .. "    " .. "return _obj;\n";
        tmp = tmp .. "}\n\n";
        finaltxt = finaltxt .. tmp;
    end
    print(finaltxt);
    return finaltxt;
};

lua.eval {
    if(arg[2]) then 
        local file = br.utils.file.load.text(arg[2]);
        br.bruter.eval(file);
        file = br.bakestructs();
        br.utils.file.save.text(arg[3], file);
    end
};