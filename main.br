// should be used with bruterra;
set List from lua.require {lib.list};
set io from lua.global.terralib.includec {stdio.h};
set main from lua.eval 
{
    local Bytes = br.List(uint8);
    local Disk = br.List(uint8);

    struct RGBA
    {
        r:uint8;
        g:uint8;
        b:uint8;
        a:uint8;
    };

    local Memory = br.List(RGBA);
    local Memory2 = br.List(Memory);
    local Memory3 = br.List(Memory2);
    local Memory4 = br.List(Memory3);
    
    
    return terra()
        var memory:Memory4 = Memory4.new();
        
        for w = 0, 1 do 
            memory:push(Memory3.new());
            for k = 0, 255 do
                memory.data[w]:push(Memory2.new());
                for j = 0, 255 do
                    memory.data[w].data[k]:push(Memory.new());
                    for i = 0, 255 do
                        memory.data[w].data[k].data[j]:push([RGBA]{r = 0, g = 0, b = 0, a = 0});
                    end
                end
            end
        end
        memory.data[0].data[0].data[0].data[0].r = 244;
        br.io.printf("Hello, World!%d\n",memory.data[0].data[75].data[45].data[52].r);
        br.io.printf("Hello, World!%d\n",memory.data[0].data[0].data[0].data[0].r);
        br.io.printf("Hello, World!%d\n",memory.data[0].data[0].data[44].data[0].r);
        br.io.scanf("Hello, World!%d\n");
    end
};
// main;
set exports.main $main;