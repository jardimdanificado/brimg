disk: unsigned char[]

types:
0 = void 0 bytes
1 = byte 1 byte
2 = int 4 bytes
3 = float 4 bytes
4 = string ? bytes
5+ = custom types

// disk 
//byte 0 to 255 are "reserved" for the system

0 = NULL
1-4 = current index
5-8 = 

32-48 = title

// disk functions

0 - 
1 - set (position, value)
2 - insert (value, position)
3 - remove (position, size or 1)
4 - move (origin, destiny, size or 1)
5 - swap (origin, destiny, size or 1)
6 - shift (start, size, direction)
7 - random (destiny, size or 1)
8 - copy (origin, destiny, size or 1)
9 - fill (start, size, value)
10 - reverse (start, size)
11 - sort (start, size)
12 - find (offset, size)
13 - replace (position, size, value)
14 - replaceall (position, size, value)
15 - goto (position)
16 - if (condition, gotoPosition)
17 - ifnot (condition, gotoPosition)
18 - ifelse (condition, value1, value2, gotoPosition1, gotoPosition2)

256 - get_byte (position)
257 - get_int (position)
258 - get_float (position)
259 - get_string (position, size)


// conditions 0-255

0 - 
1 - ==
2 - !=
3 - >
4 - <
5 - >=
6 - <=


// structs

struct people
0 byte age
1 float weight
5 float height
9 string name
21 int id;

typedef struct 
{
    byte age;
    float weight;
    float height;
    char* name;
    int id;
} people;

people get_people(Disk *disk, int index)
{
    people _obj;
    _obj.age = get_byte(disk, index + 0);
    _obj.weight = get_float(disk, index + 1);
    _obj.height = get_float(disk, index + 5);
    _obj.name = get_string(disk, index + 9, 12);
    _obj.id = get_int(*disk, index + 21);
    return _obj;
}
