disk: unsigned char[]

types:
0 = void 0 bytes
1 = byte 1 byte
2 = short 2 bytes
3 = int 4 bytes
4 = long 8 bytes
5 = float 4 bytes
6 = double 8 bytes
7 = long double 10 bytes
8 = array(string) ? bytes
9+ = custom types

// disk 
// byte 0 to 7 are "reserved" for the system

version = x.y.z

0 = state
1 = version x
2 = version y
3 = version z
4-7 = current index

// disk functions

0 - state(state):
f b

1 - set (position, size, data):
f iiii iiii ?

2 - insert (position, size, data):
f iiii iiii ?

3 - delete (position, size or 1):
f iiii iiii

4 - move (origin, destiny, size or 1):
f iiii iiii iiii

5 - swap (origin, destiny, size or 1):
f iiii iiii iiii

6 - shift (start, size, direction):
f iiii iiii b

7 - random (destiny, size or 1):
f iiii iiii

8 - copy (origin, destiny, size or 1):
f iiii iiii iiii

9 - fill (start, size, value):
f iiii iiii b

10 - reverse (start, size):
f iiii iiii

11 - sort (start, size):
f iiii iiii

12 - find (position, size, patternsize, pattern, result):
f iiii iiii iiii ? iiii



// conditions

13 - if (position, size, code):
f iiii iiii ?

14 - ifelse (position, sizeif, sizeelse, ifcode, elsecode): // removed
f iiii iiii iiii ? ?

15 - equal(position1, position2, size, result):
f iiii iiii iiii iiii

16 - not_equal(position1, position2, size, result):
f iiii iiii iiii iiii

17 - greater(position1, position2, size, result):
f iiii iiii iiii iiii

18 - less(position1, position2, size, result):
f iiii iiii iiii iiii

19 - greater_or_equal(position1, position2, size, result):
f iiii iiii iiii iiii

20 - less_or_equal(position1, position2, size, result):
f iiii iiii iiii iiii

21 - and(position, size, result):
f iiii iiii iiii

22 - or(position, size, result):
f iiii iiii iiii


// other
23 - print (position, size)
f iiii iiii

// flow control
24 - goto (position) 
f iiii

// 25 - while (condition, size, code) -- removed
// f b iiii ?

26 - add (position1, position2, type)
f iiii iiii b

27 - sub (position1, position2, type)
f iiii iiii b

28 - mul (position1, position2, type)
f iiii iiii b

29 - div (position1, position2, type)
f iiii iiii b

30 - increment (position, type)
f iiii b

31 - decrement (position, type)
f iiii b

// math operations
0 - add
1 - sub
2 - mul
3 - div
4 - increment
5 - decrement

// math types
1 - byte
2 - short
3 - int
4 - long
5 - float
6 - double
7 - long double


// structs
struct people
0 char age
1 float weight
5 float height
9 12 name
21 int id;

typedef struct 
{
    int age;
    float weight;
    float height;
    byte name[12];
    int id;
} people;

people get_people(Disk *disk, int index)
{
    people _obj;
    _obj.age = get_byte(disk, index + 0);
    _obj.weight = get_float(disk, index + 1);
    _obj.height = get_float(disk, index + 5);
    _obj.name = get_string(disk, index + 9, 12);
    _obj.id = get_int(*disk, index + 21);
    return _obj;
}
