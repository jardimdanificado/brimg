disk: unsigned char[]

types:
0 = void 0 bytes
1 = byte 1 byte
2 = short 2 bytes
3 = int 4 bytes
4 = long 8 bytes
5 = float 4 bytes
6 = double 8 bytes
7 = long double 10 bytes
8 = array(string) ? bytes
9+ = custom types

// disk 
// byte 0 to 7 are "reserved" for the system

version = x.y.z

0 = state
1 = version x
2 = version y
3 = version z
4-7 = current index

// disk functions

0 - 
1 - set (position, value)
2 - insert (value, position)
3 - delete (position, size or 1)
4 - move (origin, destiny, size or 1)
5 - swap (origin, destiny, size or 1)
6 - shift (start, size, direction)
7 - random (destiny, size or 1)
8 - copy (origin, destiny, size or 1)
9 - fill (start, size, value)
10 - reverse (start, size)
11 - sort (start, size)
12 - replace (position, size, value)
13 - replaceall (position, size, value)

// conditions

14 - if (position, goto1, goto2)
15 - equal(position1, position2, size, result)
16 - not_equal(position1, position2, size, result)
17 - greater(position1, position2, size, result)
18 - less(position1, position2, size, result)
19 - greater_or_equal(position1, position2, size, result)
20 - less_or_equal(position1, position2, size, result)
21 - and(position, size, result)
22 - or(position, size, result)

// multi-disk functions


// other
23 - print (position, size)

// structs

struct people
0 char age
1 float weight
5 float height
9 12 name
21 int id;

typedef struct 
{
    int age;
    float weight;
    float height;
    byte name[12];
    int id;
} people;

people get_people(Disk *disk, int index)
{
    people _obj;
    _obj.age = get_byte(disk, index + 0);
    _obj.weight = get_float(disk, index + 1);
    _obj.height = get_float(disk, index + 5);
    _obj.name = get_string(disk, index + 9, 12);
    _obj.id = get_int(*disk, index + 21);
    return _obj;
}
