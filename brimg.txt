disk: unsigned char[]

types:
0 = void 0 bytes
1 = byte 1 byte
2 = short 2 bytes
3 = int 4 bytes
4 = long 8 bytes
5 = float 4 bytes
6 = double 8 bytes
7 = long double 10 bytes

// disk 
// byte 0 to 7 are "reserved" for the system

version = x.y.z

0 = state
1 = version x
2 = version y
3 = version z
4-7 = current index



// disk functions

0 - STATE (state)                                         f b
1 - SET (position, size, data)                            f iiii iiii ?
2 - INSERT (position, size, data)                         f iiii iiii ?
3 - DELETE (position, size)                               f iiii iiii
4 - MOVE (origin, destiny, size)                          f iiii iiii iiii
5 - SWAP (origin, destiny, size)                          f iiii iiii iiii
6 - SHIFT (start, size, direction)                        f iiii iiii b
7 - RANDOM (position, size)                               f iiii iiii
8 - COPY (origin, destiny, size)                          f iiii iiii iiii
9 - FILL (start, size, value)                             f iiii iiii b
10 - REVERSE (start, size)                                f iiii iiii
11 - SORT (start, size)                                   f iiii iiii
12 - FIND (position, size, result, patternsize, pattern)  f iiii iiii iiii iiii ?






// conditions

13 - IF (position, size, code)                               f iiii iiii ?
14 - NULL
15 - EQUAL (position1, position2, size, result)              f iiii iiii iiii iiii
16 - NOT_EQUAL (position1, position2, size, result)          f iiii iiii iiii iiii
17 - GREATER (position1, position2, size, result)            f iiii iiii iiii iiii
18 - LESS (position1, position2, size, result)               f iiii iiii iiii iiii
19 - GREATER_OR_EQUAL (position1, position2, size, result)   f iiii iiii iiii iiii
20 - LESS_OR_EQUAL (position1, position2, size, result)      f iiii iiii iiii iiii
21 - AND (position, size, result)                            f iiii iiii iiii
22 - OR (position, size, result)                             f iiii iiii iiii


// other
23 - PRINT (position, size)     f iiii iiii
24 - SCAN (position, size)      f iiii iiii
25 - GOTO (position)            f iiii





// math

26 - ADD (position1, position2, type)           f iiii iiii b
27 - SUB (position1, position2, type)           f iiii iiii b
28 - MUL (position1, position2, type)           f iiii iiii b
29 - DIV (position1, position2, type)           f iiii iiii b
30 - INCREMENT (position, type)                 f iiii b
31 - DECREMENT (position, type)                 f iiii b
32 - MOD (position1, position2, result, type)   f iiii iiii iiii b
33 - POW (position1, position2, type)           f iiii iiii b
34 - SQRT (position, type)                      f iiii b
35 - ABS (position, type)                       f iiii b
36 - MIN (position1, position2, result, type)   f iiii iiii iiii b
37 - MAX (position1, position2, result, type)   f iiii iiii iiii b
38 - RANDOM (position, pmin, pmax, type)        f iiii iiii iiii b
39 - ROUND (position, type)                     f iiii b
40 - FLOOR (position, type)                     f iiii b
41 - CEIL (position, type)                      f iiii b
42 - TRUNC (position, type)                     f iiii b
43 - SIN (position, type)                       f iiii b
44 - COS (position, type)                       f iiii b
45 - TAN (position, type)                       f iiii b
46 - ASIN (position, type)                      f iiii b
47 - ACOS (position, type)                      f iiii b
48 - ATAN (position, type)                      f iiii b
49 - ATAN2 (position1, position2, type)         f iiii iiii b
50 - SINH (position, type)                      f iiii b
51 - COSH (position, type)                      f iiii b
52 - TANH (position, type)                      f iiii b
53 - EXP (position, type)                       f iiii b
54 - FREXP (position, type)                     f iiii iiii b
55 - LDEXP (position1, position2, type)         f iiii iiii b
56 - LOG (position, type)                       f iiii b
57 - LOG2 (position, type)                      f iiii b
58 - LOG10 (position, type)                     f iiii b

// file

59 - LOAD (destiny, size, filenamesize, filename) f iiii iiii iiii ?
60 - SAVE (origin, size, filenamesize, filename)  f iiii iiii iiii ?


// bruter bytecode compiler

0 - 
1 - literal
2 - decimal
3 - hex
4 - short
5 - int
6 - long
7 - float
8 - double
9 - long double